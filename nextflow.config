// Global default params
params {
    // Pipeline metadata
    outdir = 'results'
    publish_dir_mode = 'copy'
    
    // Credentials and auth
    google_auth = '/path/to/google-auth.json'
    
    // Container versions - override in profiles if needed
    collect_container = 'riboseq-collection:latest'
    process_container = 'riboseq-processing:latest'
}

// Process-specific configuration
process {
    // Global process config
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode
    ]

    // Process-specific configurations
    withName: COLLECT {
        container = params.collect_container
        memory = 4.GB
        cpus = 2
        errorStrategy = { task.attempt <= 1 ? 'retry' : 'finish' }
        maxRetries = 0
    }

    withName: PROCESS {
        container = params.process_container
        memory = 2.GB
        cpus = 1
        errorStrategy = { task.attempt <= 1 ? 'retry' : 'finish' }
        maxRetries = 1
    }
}

// Profiles for different execution environments
profiles {
    standard {
        process.executor = 'local'
    }
    
    docker {
        docker.enabled = true
        docker.userEmulation = true
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }

    test {
        // Test profile with minimal resources
        params {
            // Use test containers/data
            collect_container = 'organization/riboseq-collection:test'
            process_container = 'organization/riboseq-processing:test'
        }
        process {
            // Reduce resource requirements for testing
            memory = 1.GB
            cpus = 1
        }
    }
    
    production {
        // Production settings
        process {
            // Increase resources for production
            withName: COLLECT {
                memory = 8.GB
                cpus = 4
            }
            withName: PROCESS {
                memory = 4.GB
                cpus = 2
            }
        }
    }
}

// Timeline and trace reports
timeline {
    enabled = true
    overwrite = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}

report {
    enabled = true
    overwrite = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
}

trace {
    enabled = false
    overwrite = true
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}

// Manifest for pipeline metadata
manifest {
    name = 'RiboSeq Data Portal Update Pipeline'
    author = 'Jack Tierney'
    description = 'Pipeline to update RiboSeq Data Portal'
    version = '1.0.0'
    nextflowVersion = '>=21.04.0'
}

// Function to validate parameters
def validateParameters() {
    if (!params.google_auth) {
        exit 1, "Google authentication file not specified!"
    }
}